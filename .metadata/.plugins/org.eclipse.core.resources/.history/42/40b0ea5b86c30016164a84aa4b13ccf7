// Attention : Extension .cu

#include <iostream>
#include "cudaTools.h"
#include "Device.h"
#include "ReductionTools.h"

using std::cout;
using std::endl;

/*----------------------------------------------------------------------*\
 |*			Declaration 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Imported	 	*|
 \*-------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

__host__ bool testReductionTool(void); //__host__ facultatif

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

__global__ static void kernelReductionTools(float* total);

/*----------------------------------------------------------------------*\
 |*			Implementation 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

/**
 * resumer commande cuda:
 * http://developer.download.nvidia.com/compute/cuda/4_2/rel/toolkit/docs/online/index.html
 */
__host__ bool testReductionTool(void) //__host__ facultatif
    {
    cout << endl << "[ReductionTools Cuda 1] : kernel empty" << endl;

    const int MP = Device::getMPCount();
    const int CORE_MP = Device::getCoreCountMP();
    const int DIM = 4;

    dim3 dg = dim3(MP, DIM, 1);
    dim3 db = dim3(CORE_MP, DIM, 1);
    Device::gridHeuristic(dg, db);

    float ptrTotal = 0;
    float* ptrDevTotal;
    const size_t S = sizeof(float);
    const size_t SIZE_SM = S * CORE_MP * CORE_MP * DIM;

    HANDLE_ERROR(cudaMalloc(&ptrDevTotal, S));
    HANDLE_ERROR(cudaMemset(ptrDevTotal, 0, S)); // Important pour l'interBlock

    Device::lastCudaError("kernelReductionTools (before)"); // temp debug
    kernelReductionTools<<<dg,db,SIZE_SM>>>(ptrDevTotal);  // asynchrone !!
    Device::lastCudaError("kernelReductionTools (after)"); // temp debug

    HANDLE_ERROR(cudaMemcpy(&ptrTotal, ptrDevTotal, S, cudaMemcpyDeviceToHost));

    cout << endl << "Valeure finale: " << ptrTotal << endl;

    HANDLE_ERROR(cudaFree(ptrDevTotal));

    return true;
    }

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

/**
 * output : void
 */
__global__ void kernelReductionTools(float* total)
    {
    extern __shared__ float tabSM[];
    tabSM[Indice2D::tidLocal()] = 1;
    ReductionTools::reductionADD(tabSM, total);
    }


/*----------------------------------------------------------------------*\
 |*			End	 					*|
 \*---------------------------------------------------------------------*/
