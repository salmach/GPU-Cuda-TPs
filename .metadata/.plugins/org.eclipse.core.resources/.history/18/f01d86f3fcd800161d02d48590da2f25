#include "Indice2D.h"
#include "cudaTools.h"

#include "IndiceTools_GPU.h"
#include "DomaineMath_GPU.h"
using namespace gpu;

/*----------------------------------------------------------------------*\
 |*			Declaration 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Imported	 	*|
 \*-------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

__global__ void rayTracingKernel(uchar4* ptrDevPixels, uint w, uint h, DomaineMath domaineMath, float t);

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

/*----------------------------------------------------------------------*\
 |*			Implementation 					*|
 \*---------------------------------------------------------------------*/

/*--------------------------------------*\
 |*		Public			*|
 \*-------------------------------------*/

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

__global__ void rayTracingKernel(uchar4* ptrDevPixels, uint w, uint h, DomaineMath domaineMath,float t)
    {

    //DamierMath damierMath = DamierMath(n);

    const int TID = Indice2D::tid();
    const int NB_THREAD = Indice2D::nbThread();
    const int WH = w * h;

    double x;
    double y;

    int i;// in [0,h[
    int j;// in [0,w[

    int s = TID;
    while (s < WH)
	{

	//float hCarre(float2 xySol)
	//bool isEnDessous(float hCarre)
	//float dz(float hCarre)
	//float distance(float dz)
	//float brightness(float dz)

	IndiceTools::toIJ(s, w, &i, &j); // update (i, j)
	calculColorPixel(i,j, ptrDevSphere, nbSphere, uchar4 &color, int t))



	// (i,j) domaine ecran
	// (x,y) domaine math
	// domaineMath.toXY(i, j, &x, &y); //  (i,j) -> (x,y)

	s += NB_THREAD;
	}

    }

/*--------------------------------------*\
 |*		Private			*|
 \*-------------------------------------*/

/*----------------------------------------------------------------------*\
 |*			End	 					*|
 \*---------------------------------------------------------------------*/


__device__
void calculColorPixel(int i, int j, Sphere* ptrDevSphere, int n, uchar4 &color, int t)
    {
    float3 colorHSB;
    colorHSB.x = 0; // h
    colorHSB.y = 1; // s
    colorHSB.z = 0; // b

    for (int k = 0; k < n; k++)
	{
	float minDist = 10000000.0;

	float2 solxy;
	solxy.x = i;
	solxy.y = j;
	//Calculer h 2
	float hCarre = ptrDevSphere[k].hCarre(solxy);

	//Calculer isEndessous
	bool isEndessous = ptrDevSphere[k].isEnDessous(hCarre);

	if (isEndessous == true)
	    {
	    //Calculer dz
	    float dz = ptrDevSphere[k].dz(hCarre);
	    //Calculer distance
	    float distance = ptrDevSphere[k].distance(dz);
	    //Calculer brightnesse
	    if (distance < minDist)
		{
		minDist = distance;
		colorHSB.z = ptrDevSphere[k].brightness(dz);
		colorHSB.x = ptrDevSphere[k].hue(t);
		}

	    }
	}

    color.w = 255;
    ColorToolCuda::HSB_TO_RVB(colorHSB.x, colorHSB.y, colorHSB.z, color.x, color.y, color.z);

    }
