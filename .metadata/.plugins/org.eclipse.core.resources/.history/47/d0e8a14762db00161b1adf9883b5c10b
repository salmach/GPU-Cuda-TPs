#pragma once

#include <math.h>
#include "MathTools.h"

#include "Calibreur_GPU.h"
#include "ColorTools_GPU.h"
using namespace gpu;

class MandelbrotMath : public FractaleMath
    {

    public:
	__device__
	MandelbrotMath(uint n) : FractaleMath(n)
	{	}


    	__device__
    	 virtual ~MandelbrotMath() {}


	__device__
	virtual  int calculIndice(float x, float y)
    	    {
/*
    	    float a = 0;
    	    float b = 0;
    	    int i = 0;

    	    for (i = 0; i <= n; i++)
    		{
    		float aCopy = a;
    		a = ((a * a) - (b * b)) + x;
    		b = 2 * aCopy * b + y;

    		if (isDivergent(a, b))
    		    {
    		    return i;
    		    }
    		}
    	    return i;
    	    */
	return 12;
    	    }

	//	__device__
	//	    void workonPixelMandelbrot(uchar4* ptrColorIJ, int i, int j, const DomaineMath& domaineMath)
	//		{
	//		// (i,j) domaine ecran dans N2
	//		// (x,y) domaine math dans R2
	//
	//		double x;
	//		double y;
	//		domaineMath.toXY(i, j, &x, &y); // fill (x,y) from (i,j)
	//
	//		// float t=variateurAnimation.get();
	//
	//		colorXYMandelbrot(ptrColorIJ, x, y); // in [01]
	//		}




	//	__device__
	//	virtual  int calculIndiceMandelbrot(float x, float y)
	//	    {
	//
	//	    float a = 0;
	//	    float b = 0;
	//	    int i = 0;
	//
	//	    for (i = 0; i <= n; i++)
	//		{
	//		float aCopy = a;
	//		a = ((a * a) - (b * b)) + x;
	//		b = 2 * aCopy * b + y;
	//
	//		if (isDivergent(a, b))
	//		    {
	//		    return i;
	//		    }
	//		}
	//	    return i;
	//
	//	    }





    };
